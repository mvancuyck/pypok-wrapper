import astropy.units as u 
import numpy as np

def cls2map(l, clt, nx, ny, res_arcmin, map_t, cu_t, k_map, k_mapx, k_mapy, zero_index=None, index=None, l_cutoff=0, no_k_map_reset = 0, no_cu_t_rest = 0, ampl = 0, seed = 0, force = 0 , fwhm_arcmin = 0)

lmap_rad_x = nx*res_arcmin
lmap_rad_y = ny*res_arcmin

#Generate gaussian amplitudes
noise    = dblarr( nx, ny)
n2       = nx*ny

noise = np.randomn( seed, n2)
dmn1     = fft( noise, /double)

noise[*] = randomn( seed, n2, /double)
dmn2     = fft( noise, /double)

# Init amn fields
# nx and ny appear in the definition of norm because the amplitudes in Fourier space
# are generated by the fft of a white noise map in real space
norm = sqrt( (nx/lmap_rad_x)*(ny/lmap_rad_y))

#Define k modes
if(no_k_map_reset == None):
    give_map_k, res_arcminrcmin2rad, dblarr(nx,ny), k_map, k_mapx, k_mapy
    k_map  = k_map  * 2.0d0*!dpi
    k_mapx = k_mapx * 2.0d0*!dpi
    k_mapy = k_mapy * 2.0d0*!dpi

if(l_cutoff != 0):
   lmax = l_cutoff
else:
   if(index != None or zero_index != None):
      lmax =  k_map.max()
  else:
      lmax = l.max()
